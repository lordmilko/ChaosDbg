<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <UsingTask
        TaskName="TerminateLockingProcesses"
        TaskFactory="RoslynCodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
        <ParameterGroup>
            <Path ParameterType="System.String" Required="true" />
            <SourceFiles ParameterType="System.String[]" Required="false" />
            <DestinationFiles ParameterType="System.String[]" Required="false" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System"/>
            <Using Namespace="System.IO"/>
            <Code Type="Class" Language="cs">
                <![CDATA[
// Display "Hello, world!"
public class TerminateLockingProcesses : Microsoft.Build.Utilities.Task
{
    [Microsoft.Build.Framework.Required]
    public string Path { get; set; }

    [Microsoft.Build.Framework.Required]
    public string[] SourceFiles { get; set; }

    [Microsoft.Build.Framework.Required]
    public string[] DestinationFiles { get; set; }

    public override bool Execute()
    {    
        var messageImportance = Microsoft.Build.Framework.MessageImportance.High;

        if (SourceFiles != null && System.IO.File.Exists(Path))
        {
            for (var i = 0; i < DestinationFiles.Length; i++)
            {
                if (DestinationFiles[i] == Path)
                {                
                    var sourceFileInfo = new System.IO.FileInfo(SourceFiles[i]);
                    var destinationFileInfo = new System.IO.FileInfo(DestinationFiles[i]);
                    
                    if (sourceFileInfo.Length != destinationFileInfo.Length || sourceFileInfo.LastWriteTime != destinationFileInfo.LastWriteTime)
                    {
                        //From https://stackoverflow.com/questions/317071/how-do-i-find-out-which-process-is-locking-a-file-using-net
                        var processes = WhoIsLocking(Path);
                        
                        foreach (var process in processes)
                        {
                            Log.LogMessage(messageImportance, string.Format("!!! '{0}' is locked by process '{1}' (PID: {2}). Terminating process", Path, process.ProcessName, process.Id));
                            process.Kill();
                        }
                    }
                }
            }
        }
        else
        {
            Log.LogMessage(messageImportance, "No source files specified!");
        }
    
        return true;
    }
    
    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
    struct RM_UNIQUE_PROCESS
    {
        public int dwProcessId;
        public System.Runtime.InteropServices.ComTypes.FILETIME ProcessStartTime;
    }

    const int RmRebootReasonNone = 0;
    const int CCH_RM_MAX_APP_NAME = 255;
    const int CCH_RM_MAX_SVC_NAME = 63;

    enum RM_APP_TYPE
    {
        RmUnknownApp = 0,
        RmMainWindow = 1,
        RmOtherWindow = 2,
        RmService = 3,
        RmExplorer = 4,
        RmConsole = 5,
        RmCritical = 1000
    }

    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    struct RM_PROCESS_INFO
    {
        public RM_UNIQUE_PROCESS Process;

        [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst = CCH_RM_MAX_APP_NAME + 1)]
        public string strAppName;

        [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst = CCH_RM_MAX_SVC_NAME + 1)]
        public string strServiceShortName;

        public RM_APP_TYPE ApplicationType;
        public uint AppStatus;
        public uint TSSessionId;
        [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.Bool)]
        public bool bRestartable;
    }

    [System.Runtime.InteropServices.DllImport("rstrtmgr.dll", CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    static extern int RmRegisterResources(uint pSessionHandle,
                                          uint nFiles,
                                          string[] rgsFilenames,
                                          uint nApplications,
                                          [System.Runtime.InteropServices.In] RM_UNIQUE_PROCESS[] rgApplications,
                                          uint nServices,
                                          string[] rgsServiceNames);

    [System.Runtime.InteropServices.DllImport("rstrtmgr.dll", CharSet = System.Runtime.InteropServices.CharSet.Auto)]
    static extern int RmStartSession(out uint pSessionHandle, int dwSessionFlags, string strSessionKey);

    [System.Runtime.InteropServices.DllImport("rstrtmgr.dll")]
    static extern int RmEndSession(uint pSessionHandle);

    [System.Runtime.InteropServices.DllImport("rstrtmgr.dll")]
    static extern int RmGetList(uint dwSessionHandle,
                                out uint pnProcInfoNeeded,
                                ref uint pnProcInfo,
                                [System.Runtime.InteropServices.In, System.Runtime.InteropServices.Out] RM_PROCESS_INFO[] rgAffectedApps,
                                ref uint lpdwRebootReasons);

    /// <summary>
    /// Find out what process(es) have a lock on the specified file.
    /// </summary>
    /// <param name="path">Path of the file.</param>
    /// <returns>Processes locking the file</returns>
    /// <remarks>See also:
    /// http://msdn.microsoft.com/en-us/library/windows/desktop/aa373661(v=vs.85).aspx
    /// http://wyupdate.googlecode.com/svn-history/r401/trunk/frmFilesInUse.cs (no copyright in code at time of viewing)
    /// 
    /// </remarks>
    static public System.Collections.Generic.List<System.Diagnostics.Process> WhoIsLocking(string path)
    {
        uint handle;
        string key = System.Guid.NewGuid().ToString();
        System.Collections.Generic.List<System.Diagnostics.Process> processes = new System.Collections.Generic.List<System.Diagnostics.Process>();

        int res = RmStartSession(out handle, 0, key);
        if (res != 0) throw new System.Exception("Could not begin restart session.  Unable to determine file locker.");

        try
        {
            const int ERROR_MORE_DATA = 234;
            uint pnProcInfoNeeded = 0,
                 pnProcInfo = 0,
                 lpdwRebootReasons = RmRebootReasonNone;

            string[] resources = new string[] { path }; // Just checking on one resource.

            res = RmRegisterResources(handle, (uint)resources.Length, resources, 0, null, 0, null);

            if (res != 0) throw new System.Exception("Could not register resource.");

            //Note: there's a race condition here -- the first call to RmGetList() returns
            //      the total number of process. However, when we call RmGetList() again to get
            //      the actual processes this number may have increased.
            res = RmGetList(handle, out pnProcInfoNeeded, ref pnProcInfo, null, ref lpdwRebootReasons);

            if (res == ERROR_MORE_DATA)
            {
                // Create an array to store the process results
                RM_PROCESS_INFO[] processInfo = new RM_PROCESS_INFO[pnProcInfoNeeded];
                pnProcInfo = pnProcInfoNeeded;

                // Get the list
                res = RmGetList(handle, out pnProcInfoNeeded, ref pnProcInfo, processInfo, ref lpdwRebootReasons);
                if (res == 0)
                {
                    processes = new System.Collections.Generic.List<System.Diagnostics.Process>((int)pnProcInfo);

                    // Enumerate all of the results and add them to the 
                    // list to be returned
                    for (int i = 0; i < pnProcInfo; i++)
                    {
                        try
                        {
                            processes.Add(System.Diagnostics.Process.GetProcessById(processInfo[i].Process.dwProcessId));
                        }
                        // catch the error -- in case the process is no longer running
                        catch (System.ArgumentException) { }
                    }
                }
                else throw new System.Exception("Could not list processes locking resource.");
            }
            else if (res != 0) throw new System.Exception("Could not list processes locking resource. Failed to get size of result.");
        }
        finally
        {
            RmEndSession(handle);
        }

        return processes;
    }
}
]]>
            </Code>
        </Task>
    </UsingTask>

  <Target Name="TerminateLockingProcesses" BeforeTargets="_CopyFilesMarkedCopyLocal">
    <TerminateLockingProcesses Path="$(OutputPath)$(AssemblyName).exe" SourceFiles="@(IntermediateAssembly)" DestinationFiles="@(IntermediateAssembly->'$(OutDir)%(DestinationSubDirectory)%(Filename)%(Extension)')" />
  </Target>
</Project>