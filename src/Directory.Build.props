<Project>
  <PropertyGroup>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>

    <Build>$(MSBuildThisFileDirectory)..\build\</Build>
	
    <Copyright>(c) 2023 lordmilko. All rights reserved.</Copyright>

    <!-- Prior to Visual Studio 2022 17.1, there is an issue when building SDK style .NET Framework projects, wherein the app.exe.config file's timestamp does not get updated,
         breaking incremental builds. By enabling View -> Tools -> SDL-Style Projects -> Logging Level: Verbose you can see the details of the FastUpToDate checks.
         Since it doesn't seem we can hack into the target they applied the fix in to make this with in VS2019, our options for resolving this are
         either to create a target that applies a Touch task to force update the config file, or alternatively just disable generating the config file
         all together. We currently employ the latter option. Note that unlike what https://github.com/dotnet/project-system/issues/6758 says,
         the correct way to disable the app.config file in SDK style projects is to use the GenerateSupportedRuntime attribute -->
    <GenerateSupportedRuntime>false</GenerateSupportedRuntime>

    <IsRelease Condition="'$(Configuration)' == 'Release'">true</IsRelease>
    <IsRelease Condition="'$(IsRelease)' == ''">false</IsRelease>

    <SingleFile Condition="$(IsRelease)">true</SingleFile>
    <SingleFile Condition="'$(SingleFile)' == ''">false</SingleFile>
  </PropertyGroup>

  <!-- Package Versions -->

  <PropertyGroup>
    <EnvDTEVersion>8.0.3</EnvDTEVersion>
    <ClrDebugVersion>0.3.0</ClrDebugVersion>
    <ChaosLibVersion>0.1.0</ChaosLibVersion>
    <DbgEngVersion>20230731.1609.0</DbgEngVersion>
    <DbgShimVersion>8.0.452401</DbgShimVersion>
    <FlaUIVersion>4.0.0</FlaUIVersion>

    <TestSDKVersion>16.9.4</TestSDKVersion>
    <MSTestVersion>2.2.3</MSTestVersion>
    <CoverletVersion>3.0.2</CoverletVersion>
  </PropertyGroup>

  <Target Name="RemoveDbgShim" AfterTargets="Build">
    <!-- When targeting .NET Framework, MSBuild will assume we are win7-x86, and will copy the x86 dbgshim.dll
         to the output directory. We don't want this, we want to resolve our dbgshim.dll from either our x86 or x64
         subdirectories. As such, we ensure to delete this file from the output directory if it gets created -->
    <Delete Files="$(OutDir)\dbgshim.dll" />
  </Target>
</Project>